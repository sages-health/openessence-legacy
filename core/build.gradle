/*
 * Copyright (c) 2013 The Johns Hopkins University/Applied Physics Laboratory
 *                             All rights reserved.
 *
 * This material may be used, modified, or reproduced by or for the U.S.
 * Government pursuant to the rights granted under the clauses at
 * DFARS 252.227-7013/7014 or FAR 52.227-14.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * NO WARRANTY.   THIS MATERIAL IS PROVIDED "AS IS."  JHU/APL DISCLAIMS ALL
 * WARRANTIES IN THE MATERIAL, WHETHER EXPRESS OR IMPLIED, INCLUDING (BUT NOT
 * LIMITED TO) ANY AND ALL IMPLIED WARRANTIES OF PERFORMANCE,
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT OF
 * INTELLECTUAL PROPERTY RIGHTS. ANY USER OF THE MATERIAL ASSUMES THE ENTIRE
 * RISK AND LIABILITY FOR USING THE MATERIAL.  IN NO EVENT SHALL JHU/APL BE
 * LIABLE TO ANY USER OF THE MATERIAL FOR ANY ACTUAL, INDIRECT,
 * CONSEQUENTIAL, SPECIAL OR OTHER DAMAGES ARISING FROM THE USE OF, OR
 * INABILITY TO USE, THE MATERIAL, INCLUDING, BUT NOT LIMITED TO, ANY DAMAGES
 * FOR LOST PROFITS.
 */

apply plugin: 'war'
apply plugin: 'eclipse-wtp'

eclipse.wtp.facet.file.withXml { provider ->
    provider.asNode().installed.find { it.@facet == 'jst.web' }.@version = project.versions.servlet
}

dependencies {
    compile project(':openessence-datasource')
    compile project(':graph')
    compile project(':detector-interface')

    // Kind of silly to include all detectors even if site doesn't want them, but oh well
    compile project(':open-detectors')

    compile "org.apache.httpcomponents:httpclient:${project.versions.httpclient}"
    compile "org.apache.poi:poi:3.8"
    compile "org.apache.poi:poi-ooxml:3.8"
    compile "commons-codec:commons-codec:1.7"
    compile "commons-fileupload:commons-fileupload:1.2.2"
    compile "commons-io:commons-io:${project.versions.commonsIo}"
    compile "commons-lang:commons-lang:2.4"
    compile "commons-net:commons-net:3.2"
    compile "joda-time:joda-time:1.6"
    compile "opensymphony:quartz-all:1.6.3"
    compile "org.codehaus.groovy:groovy:${project.versions.groovy}"
    compile "org.codehaus.jackson:jackson-mapper-asl:${project.versions.jackson}"

    // Connection pooling. This is used if their's no container managed pool.
    compile "com.jolbox:bonecp:${project.versions.bonecp}"
    compile "com.jolbox:bonecp-provider:${project.versions.bonecp}"
    compile "com.jolbox:bonecp-spring:${project.versions.bonecp}"

    // JSR-330 annotations
    compile "javax.inject:javax.inject:1"

    // Spring
    compile "org.springframework:spring-core:${project.versions.spring}"
    compile "org.springframework:spring-beans:${project.versions.spring}"
    compile "org.springframework:spring-context:${project.versions.spring}"
    compile "org.springframework:spring-context-support:${project.versions.spring}"
    compile "org.springframework:spring-jdbc:${project.versions.spring}"
    compile "org.springframework:spring-orm:${project.versions.spring}"
    compile "org.springframework:spring-web:${project.versions.spring}"
    compile "org.springframework:spring-webmvc:${project.versions.spring}"

    // Spring Security
    compile "org.springframework.security:spring-security-core:${project.versions.springSecurity}"
    compile "org.springframework.security:spring-security-web:${project.versions.springSecurity}"
    compile "org.springframework.security:spring-security-config:${project.versions.springSecurity}"
    compile "org.springframework.security:spring-security-taglibs:${project.versions.springSecurity}"

    // logging
    compile "org.slf4j:slf4j-api:${project.versions.slf4j}"
    compile "ch.qos.logback:logback-classic:${project.versions.logback}"
    compile "org.logback-extensions:logback-ext-spring:0.1.1"

    compile "javax.servlet:jstl:${project.versions.jstl}"

    providedCompile "javax.servlet:servlet-api:${project.versions.servlet}"
    providedCompile "javax.servlet.jsp:jsp-api:${project.versions.jsp}"
}

/**
 * Always build an exploded version too.
 *
 * Feel free to turn this on if you want it in your personal builds,
 * but it takes a long time                                         
 */
//task explodedWar(type: Sync) {
//	into "$buildDir/exploded"
//	with war
//}
//war.dependsOn explodedWar

war {
    baseName "openessence" // instead of "core"

    // don't put version in WAR so we don't have to rename it before deploy
    archiveName "${baseName}.war"
}
