<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2013 The Johns Hopkins University/Applied Physics Laboratory
  ~                             All rights reserved.
  ~
  ~ This material may be used, modified, or reproduced by or for the U.S.
  ~ Government pursuant to the rights granted under the clauses at
  ~ DFARS 252.227-7013/7014 or FAR 52.227-14.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ NO WARRANTY.   THIS MATERIAL IS PROVIDED "AS IS."  JHU/APL DISCLAIMS ALL
  ~ WARRANTIES IN THE MATERIAL, WHETHER EXPRESS OR IMPLIED, INCLUDING (BUT NOT
  ~ LIMITED TO) ANY AND ALL IMPLIED WARRANTIES OF PERFORMANCE,
  ~ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT OF
  ~ INTELLECTUAL PROPERTY RIGHTS. ANY USER OF THE MATERIAL ASSUMES THE ENTIRE
  ~ RISK AND LIABILITY FOR USING THE MATERIAL.  IN NO EVENT SHALL JHU/APL BE
  ~ LIABLE TO ANY USER OF THE MATERIAL FOR ANY ACTUAL, INDIRECT,
  ~ CONSEQUENTIAL, SPECIAL OR OTHER DAMAGES ARISING FROM THE USE OF, OR
  ~ INABILITY TO USE, THE MATERIAL, INCLUDING, BUT NOT LIMITED TO, ANY DAMAGES
  ~ FOR LOST PROFITS.
  -->

<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns="http://www.springframework.org/schema/security"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!-- enable security annotations in classes -->
    <global-method-security secured-annotations="enabled"/>

    <!-- allow some resources to skip filter chain -->
    <http pattern="/oe/login/login" security="none"/>
    <http pattern="/oe/messages/**" security="none"/>
    <http pattern="/oe/locale" security="none"/>
    <http pattern="/js/lib/**" security="none"/>
    <http pattern="/js/ext-3.0.3/**" security="none"/>
    <http pattern="/js/oe/app/plugin/extFixOverrides.js" security="none"/>
    <http pattern="/js/oe/login.js" security="none"/>
    <http pattern="/js/oe/app/util/oeUtils.js" security="none"/>
    <http pattern="/js/oe/app/widget/Header.js" security="none"/>
    <http pattern="/favicon.ico" security="none"/>
    <http pattern="/css/**" security="none"/>
    <http pattern="/images/**" security="none"/>
    <http pattern="/oe/static/**" security="none"/>

    <!-- Use Basic auth for REST requests (and anything else that wants it) -->
    <http pattern="/api/**" create-session="stateless" use-expressions="true">
        <http-basic/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>
    </http>

    <http entry-point-ref="authenticationProcessingFilterEntryPoint" use-expressions="true"
          disable-url-rewriting="true">
        <intercept-url pattern="/**" access="isAuthenticated()"/>

        <!-- Define what happens on successful and unsuccessful login -->
        <form-login login-page="/oe/login/login"
                    authentication-success-handler-ref="authenticationSuccessHandler"
                    authentication-failure-handler-ref="authenticationFailureHandler"/>

        <logout logout-success-url="/oe/login/login"/>
    </http>

    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="oeUserService">
            <password-encoder ref="oePasswordEncoder">
                <salt-source user-property="salt"/>
            </password-encoder>
        </authentication-provider>
    </authentication-manager>

    <!-- Instead of redirect, return 200 on success. Clients can use status code to decide what to do -->
    <beans:bean id="authenticationSuccessHandler"
                class="edu.jhuapl.openessence.security.OeAuthenticationSuccessHandler"/>

    <!-- instead of redirect, always send 401 on failure (sending redirect is bad for XHR requests) -->
    <beans:bean id="authenticationFailureHandler"
                class="edu.jhuapl.openessence.security.Http401AuthenticationFailureHandler"/>

    <beans:bean id="oeUserService" class="edu.jhuapl.openessence.security.OEUserDetailsService"/>

    <beans:bean id="oePasswordEncoder" class="edu.jhuapl.openessence.security.OEPasswordEncoder"/>

    <!-- what happens when the user is unauthorized (send 403 or redirect to login page) -->
    <beans:bean id="authenticationProcessingFilterEntryPoint"
                class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint">
        <beans:constructor-arg>
            <beans:map>
                <beans:entry>
                    <!-- send 403 for most requests, usually XHR or static resources -->
                    <beans:key>
                        <beans:bean class="edu.jhuapl.openessence.security.Http403RequestMatcher"/>
                    </beans:key>
                    <beans:bean class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>
                </beans:entry>
            </beans:map>
        </beans:constructor-arg>
        <beans:property name="defaultEntryPoint">
            <!-- redirect to login page on common URIs that user would type into their browser -->
            <beans:bean class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
                <beans:property name="loginFormUrl" value="/oe/login/login"/>
            </beans:bean>
        </beans:property>
    </beans:bean>

</beans:beans>
